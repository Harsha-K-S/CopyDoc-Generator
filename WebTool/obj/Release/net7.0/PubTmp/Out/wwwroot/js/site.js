var currentScrolledElement = null;

function onEdit() {
    const that = $(this);
    const elementName = that.parent('td').data('name');
    that.hide();
    that.siblings('.btn-delete').hide();
    that.siblings('.btn-copy').hide();
    that.siblings('.btn-save').show();
    that.siblings('.btn-cancel').show();
    that.siblings('.editable').replaceWith(function () {
        const textCurrent = $(this).data('current');
        const textPrev = $(this).data('prev');
        switch (elementName) {
            case 'a.href':
            case 'button.href':
            case 'iframe':
                return `<input class="editable" style="width:100%" data-origin="${textCurrent}" data-prev="${textPrev}" value="${textCurrent}" >`;
            default:
                return `<textarea class="editable" style="width:100%" data-origin="${textCurrent}" data-prev="${textPrev}" rows=5 >${textCurrent}</textarea>`;
        }
    });
    return false;
}

function onEditTitle() {
    const that = $(this);
    that.hide();
    that.siblings('.btn-save-title').show();
    that.siblings('.btn-cancel-title').show();
    that.siblings('.tab-title').replaceWith(function () {
        const text = $(this).text();
        return `<input class="editable" style="width:100%" value="${text}" data-origin="${text}">`;
    });
    return false;
}

function onSave() {
    const that = $(this);
    const elementName = that.parent('td').data('name');
    const elementId = that.parent('td').data('id');
    var elementTextOrigin;
    var elementTextNew;
    switch (elementName) {
        case 'a.href':
        case 'button.href':
        case 'iframe':
            elementTextOrigin = $('input', that.parent('td')).data('origin');
            elementTextNew = $('input', that.parent('td')).val();
            break;
        default:
            elementTextOrigin = $('textarea', that.parent('td')).data('origin');
            elementTextNew = $('textarea', that.parent('td')).val();
            break;
    }
    if (elementTextNew == elementTextOrigin) {
        that.siblings('.btn-cancel').click();
        return;
    }
    const request = { element: {} };
    request.url = $('#url').val();
    request.element.id = elementId;
    switch (elementName) {
        case 'a.href':
            request.element.name = 'a';
            request.element.href = elementTextNew;
            break;
        case 'button.href':
            request.element.name = 'button';
            request.element.dataVideoEmbed = elementTextNew;
            break;
        case 'iframe':
            request.element.name = 'iframe';
            request.element.src = elementTextNew;
            break;
        case 'img.alt':
            request.element.name = 'img';
            request.element.alt = elementTextNew;
            break;
        default:
            request.element.name = elementName;
            request.element.text = elementTextNew
            break;
    }
    showLoader();
    $.ajax({
        type: 'PUT',
        url: '/Requests/UpdateElement',
        data: JSON.stringify(request),
        dataType: 'json',
        contentType: 'application/json; charset=utf-8',
        success: function (response) {
            hideLoader();
            that.siblings('.btn-edit').show();
            that.siblings('.btn-copy').show();
            that.siblings('.btn-delete').show();
            that.hide();
            that.siblings('.btn-cancel').hide();
            that.siblings('.editable').replaceWith(function () {
                switch (elementName) {
                    case 'a.href':
                    case 'button.href':
                    case 'iframe':
                        return `<div class="editable" data-current="${elementTextNew}" data-prev="${elementTextOrigin}"><a href="${elementTextNew}">${diff(elementTextOrigin, elementTextNew)}</a></div>`;
                    default:
                        return `<div class="editable" data-current="${elementTextNew}" data-prev="${elementTextOrigin}">${diff(elementTextOrigin, elementTextNew)}</div>`;
                }
            });
        },
        failure: function (response) {
            hideLoader();
            alert(response.responseText);
        },
        error: function (response) {
            hideLoader();
            alert(response.responseText);
        }
    });
}

function saveAsDraft(autoGeneratedId, taskReferenceId, url) {
    var fd = new FormData();
    fd.append('autoGeneratedId', autoGeneratedId);
    fd.append('taskReferenceId', taskReferenceId);
    fd.append('url', url);
    $.ajax({
        type: 'POST',
        url: '/Requests/SaveAsDraft',
        data: fd,
        processData: false,
        contentType: false,
        success: function (response) {
            alert('Your changes saved as draft')
        },
        failure: function (response) {
            alert(response.responseText);
        },
        error: function (response) {
            alert(response.responseText);
        }
    });
    return false;
}

function onSaveTitle() {
    const that = $(this);
    const request = {};
    request.url = $('#url').val();
    request.containerId = that.closest('tr').data('id');
    request.containerTitle = $('input', that.parent('td')).val();;
    showLoader();
    $.ajax({
        type: 'PUT',
        url: '/Requests/UpdateContainerTitle',
        data: JSON.stringify(request),
        dataType: 'json',
        contentType: 'application/json; charset=utf-8',
        success: function (response) {
            hideLoader();
            that.hide();
            that.siblings('.btn-edit-title').show();
            that.siblings('.btn-cancel-title').hide();
            that.siblings('.editable').replaceWith(`<span class="tab-title">${request.containerTitle}</span>`);
            that.closest('tr').prev().find('.tab-title-header').each(function () {
                $(this).html(request.containerTitle);
            });
        },
        failure: function (response) {
            hideLoader();
            alert(response.responseText);
        },
        error: function (response) {
            hideLoader();
            alert(response.responseText);
        }
    });
}

function onCancel() {
    const that = $(this);
    const elementName = that.parent('td').data('name');
    that.hide();
    that.siblings('.btn-edit').show();
    that.siblings('.btn-copy').show();
    that.siblings('.btn-delete').show();
    that.siblings('.btn-save').hide();
    that.siblings('.editable').replaceWith(function () {
        const elementText = $(this).data('origin');
        const elementTextPrev = $(this).data('prev');
        switch (elementName) {
            case 'a.href':
            case 'button.href':
            case 'iframe':
                return `<div class="editable" data-current="${elementText}" data-prev="${elementTextPrev}"><a href="${elementText}">${elementText}</a></div>`;
            default:
                return `<div class="editable" data-current="${elementText}" data-prev="${elementTextPrev}">${diff(elementTextPrev, elementText)}</div>`;
        }
    });
}

function onCancelTitle() {
    const that = $(this);
    that.hide();
    that.siblings('.btn-edit-title').show();
    that.siblings('.btn-save-title').hide();
    that.siblings('.editable').replaceWith(function () {
        const title = $(this).data('origin');
        return `<span class="tab-title">${title}</span>`;
    });
}

function onUpload() {
    const that = $(this);
    const elementId = that.parent('td').data('id');
    var elementTextOrigin = that.siblings('.editable-img').text();
    var input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/jpeg, image/png';
    input.onchange = function (e) {
        const file = e.target.files[0];
        var fd = new FormData();
        fd.append('autoGeneratedId', $('#autoGeneratedId').val());
        fd.append('image', file);
        fd.append('elementId', elementId);
        fd.append('url', $('#url').val());
        showLoader();
        $.ajax({
            type: 'PUT',
            url: '/Requests/UpdateElementImage',
            data: fd,
            processData: false,
            contentType: false,
            success: function (response) {
                hideLoader();
                that.siblings('.editable-img').replaceWith(elementTextOrigin.trim() == 'Image name:' ? '' : `<div class="editable-img" data-current="${file.name}" data-prev="${elementTextOrigin}"><span class="fw-bold">Image name</span>: ${diff(elementTextOrigin, file.name)}</div>`);
                that.closest('tr').find('img').attr('src', response);
            },
            failure: function (response) {
                hideLoader();
                alert(response.responseText);
            },
            error: function (response) {
                hideLoader();
                alert(response.responseText);
            }
        });
    }
    input.click();
    return false;
}

function onDownload(e) {
    const that = $(this);
    const src = that.closest('tr').find('img').attr('src');
    var link = document.createElement('a');
    link.href = `/Requests/${encodeURIComponent(src)}`;
    link.download = src.replace(/^.*[\\\/]/, '');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    return false;
}

function onClone() {
    const that = $(this);
    const elementId = that.closest('tr').data('id');
    const request = {};
    request.containerId = elementId;
    request.url = $('#url').val();
    showLoader();
    $.ajax({
        type: 'POST',
        url: '/Requests/CloneContainer',
        data: JSON.stringify(request),
        dataType: 'html',
        contentType: 'application/json; charset=utf-8',
        success: function (response) {
            hideLoader();
            that.closest('tr').attr('data-last', 'False');
            var rows = $(`*[data-id="${elementId}"], *[data-parent-id="${elementId}"]`);
            var jResponse = $($.parseHTML(response));
            rows.last().after(jResponse);
            reAttachButtons();
            //jResponse.find('.editable').after('<a href="#" class="btn-delete"><i class="fa-sharp fa-solid fa-trash"></i></a>');
            //jResponse.find('.btn-delete').on('click', onDelete);
        },
        failure: function (response) {
            hideLoader();
            alert(response.responseText);
        },
        error: function (response) {
            hideLoader();
            alert(response.responseText);
        }
    });
    return false;
}

function onDelete() {
    if (confirm('Do you really want to delete this item?') == true) {
        const that = $(this);
        const elementId = that.closest('td').data('id') ?? that.closest('tr').data('id');
        const request = {};
        request.elementId = elementId;
        request.url = $('#url').val();
        showLoader();
        $.ajax({
            type: 'POST',
            url: '/Requests/DeleteElement',
            data: JSON.stringify(request),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                hideLoader();
                $(`*[data-id="${elementId}"], *[data-parent-id="${elementId}"]`).each(function () {
                    $(this).attr('data-deleted', 'True');
                });
            },
            failure: function (response) {
                hideLoader();
                alert(response.responseText);
            },
            error: function (response) {
                hideLoader();
                alert(response.responseText);
            }
        });
    }
    return false;
}

function onCopy() {
    const elementText = $(this).siblings('.editable').text();
    navigator.clipboard.writeText(elementText);
    return false;
}

function reAttachButtons() {

    const requestStatus = $('#requestStatus').val();
    const isDeveloper = window.userRole === 'Developer';
    const isEditable = ((window.userRole === 'Manager' || window.userRole === 'Admin') && requestStatus == 'PMInProgress')
    const isCompleted = requestStatus == 'DevCompleted' || requestStatus == 'PMCompleted';

    $('.btn-edit').remove();
    $('.btn-edit-title').remove();
    $('.btn-copy').remove();
    $('.btn-save').remove();
    $('.btn-save-title').remove();
    $('.btn-cancel').remove();
    $('.btn-cancel-title').remove();
    $('.btn-upload').remove();
    $('.btn-download').remove();
    $('.btn-clone').remove();
    $('.btn-delete').remove();

    $('.editable').after('<a href="#" class="btn-copy"><i class="fa-solid fa-copy"></i></a>');

    if (isEditable && !isCompleted) {
        $('.editable').after('<a href="#" class="btn-edit"><i class="fa-solid fa-pencil"></i></a>');
        $('.editable').after(
            '<button class="btn btn-sm btn-primary btn-save">Save</button>'
            + '<button class="btn btn-sm btn-secondary btn-cancel">Cancel</button>');
        $('.tab-title').after(
            '<a href="#" class="btn-edit-title"><i class="fa-solid fa-pencil"></i></a>'
            + '<button class="btn btn-sm btn-primary btn-save-title">Save</button>'
            + '<button class="btn btn-sm btn-secondary btn-cancel-title">Cancel</button>');
        $('.editable-img').after(
            '<a href="#" class="btn-upload"><i class="fa-solid fa-paperclip"></i></a>');
    }

    if (isDeveloper) {
        $('.editable-img').after(
            '<a href="#" class="btn-download"><i class="fa-solid fa-download"></i></a>');
    }

    if (isEditable && !isCompleted) {
        $('*[data-container-discriminator="Card"], *[data-container-discriminator="Tab"]').each(function () {
            $(this).find("td:first").append('<a href="#" class="btn-delete"><i class="fa-sharp fa-solid fa-trash"></i></a>');
        });
        $('*[data-container-discriminator="Card"][data-last=True], *[data-container-discriminator="Tab"][data-last=True]').each(function () {
            $(this).find("td:first").append('<a href="#" class="btn-clone"><i class="fa-solid fa-square-plus"></i></a>');
        });
    }

    $('.btn-edit').on('click', onEdit);
    $('.btn-edit-title').on('click', onEditTitle);
    $('.btn-copy').on('click', onCopy);
    $('.btn-save').hide().on('click', onSave);
    $('.btn-save-title').hide().on('click', onSaveTitle);
    $('.btn-cancel').hide().on('click', onCancel);
    $('.btn-cancel-title').hide().on('click', onCancelTitle);
    $('.btn-upload').on('click', onUpload);
    $('.btn-download').on('click', onDownload);
    $('.btn-clone').on('click', onClone);
    $('.btn-delete').on('click', onDelete);
}

function showLoader() {
    $('.spinner').show();
}

function hideLoader() {
    $('.spinner').hide();
}

function goToPeviousChange() {
    const elements = $('.editable[data-prev!=""]').toArray();
    if (elements.length == 0) {
        return;
    }
    if (currentScrolledElement == null) {
        currentScrolledElement = elements[0];
    }
    else if (elements.indexOf(currentScrolledElement) == 0) {
        currentScrolledElement = currentScrolledElement;
    }
    else if (elements.indexOf(currentScrolledElement) > 0) {
        currentScrolledElement = elements[elements.indexOf(currentScrolledElement) - 1];
    }
    if (currentScrolledElement != null) {
        $('html,body').animate({ scrollTop: $(currentScrolledElement).offset().top });
    }
}

function goToNextChange() {
    const elements = $('.editable[data-prev!=""]').toArray();
    if (elements.length == 0) {
        return;
    }
    if (currentScrolledElement == null) {
        currentScrolledElement = elements[0];
    }
    else if (elements.indexOf(currentScrolledElement) == elements.length - 1) {
        currentScrolledElement = currentScrolledElement;
    }
    else if (elements.indexOf(currentScrolledElement) >= 0) {
        currentScrolledElement = elements[elements.indexOf(currentScrolledElement) + 1];
    }
    if (currentScrolledElement != null) {
        $('html,body').animate({ scrollTop: $(currentScrolledElement).offset().top });
    }
}

function displayHistory() {
    $('.editable[data-prev!=""], .editable-img[data-prev!=""]').each(function () {
        const elementName = $(this).parent('td').data('name');
        const textPrev = $(this).data('prev');
        const textCurrent = $(this).data('current');
        switch (elementName) {
            case 'a.href':
            case 'button.href':
            case 'iframe':
                $(this).html(`<a href="${textCurrent}">${diff(textPrev, textCurrent)}</a>`);
                break;
            default:
                $(this).html(diff(textPrev, textCurrent));
                break;
        }
    });
}

function diff(textPrev, textCurrent) {
    return textPrev != '' && textPrev != textCurrent
        ? htmldiff(textPrev, textCurrent)
        : textCurrent;
}