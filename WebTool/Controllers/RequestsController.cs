using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http.Extensions;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.StaticFiles;

using System;
using System.IO;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web;

namespace WebTool
{
    public class RequestsController : Controller
    {
        private readonly IWebHostEnvironment _environment;
        private readonly RequestStore _requestStore;
        private readonly HtmlStore _store;

        public RequestsController(IWebHostEnvironment environment, RequestStore requestStore, HtmlStore store)
        {
            _environment = environment;
            _requestStore = requestStore;
            _store = store;
        }

        [Authorize(Roles = "Developer,Manager,Admin")]
        [HttpGet("Requests/Index")]
        public IActionResult Index()
        {
            return View();
        }

        [Authorize(Roles = "Manager,Admin")]
        [HttpGet("Requests/Dashboard")]
        public IActionResult Dashboard()
        {
            return View();
        }

        [Authorize(Roles = "Manager,Admin")]
        [HttpGet("Requests/Create")]
        public IActionResult Create()
        {
            return View();
        }

        [Authorize(Roles = "Manager,Admin")]
        [HttpPost("Requests/Create")]
        public IActionResult Create(RequestCreateModel model)
        {
            if (!ModelState.IsValid)
            {
                return View("Dashboard");
            }

            try
            {
                HtmlContainerCollection containers = HtmlParser.Parse(model.Url);
                _store.Save(containers, model.Url, User.GetUserId());

                Request request = new Request();
                request.AutoGeneratedId = model.AutoGeneratedId;
                request.TaskReferenceId = model.TaskReferenceId.Value;
                request.Url = model.Url;

                return View("Results", new ResultsViewModel(containers, request));
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
                ViewBag.Error = "Could not create";

                return View("Dashboard");
            }
        }

        [Authorize]
        [HttpGet("Requests/{autogeneratedId:guid}")]
        public IActionResult Get([FromRoute] Guid autoGeneratedId)
        {
            RequestCollection requests = _requestStore.FindAll();
            Request request = requests.FindByAutoGeneratedId(autoGeneratedId);

            if (request == null || (!User.IsInRole("Developer") && request.AuthorId != User.GetUserId()))
            {
                return View("NotFound");
            }

            HtmlContainerCollection containers = _store.OpenLatest(request.Url, request.AuthorId);
            if (containers == null)
            {
                return View("NotFound");
            }

            return View("Results", new ResultsViewModel(containers, request));
        }

        [Authorize(Roles = "Manager,Admin")]
        [HttpGet("Requests/List/{userId?}")]
        public IActionResult List([FromRoute] string userId)
        {
            userId ??= User.GetUserId();
            RequestCollection requests = _requestStore.FindAll(userId);

            return View(requests);
        }

        [Authorize(Roles = "Manager,Admin")]
        [HttpGet("Requests/Publish/{autogeneratedId:guid}/{taskReferenceId:int}/{url}")]
        public IActionResult Publish([FromRoute] Guid autoGeneratedId, [FromRoute] int taskReferenceId, [FromRoute] string url)
        {
            RequestCollection requests = _requestStore.FindAll();
            Request existing = requests.FindByAutoGeneratedId(autoGeneratedId);
            Request request;

            if (existing != null)
            {
                existing.Status = RequestStatus.DevInProgress;
                request = existing;
            }
            else
            {
                request = new Request();
                request.AuthorId = User.GetUserId();
                request.AutoGeneratedId = existing == null ? autoGeneratedId : Guid.NewGuid();
                request.TaskReferenceId = taskReferenceId;
                request.Url = HttpUtility.UrlDecode(url);
                request.Status = RequestStatus.DevInProgress;

                requests.Add(request);
            }

            _requestStore.Save(requests);

            return View("Publish", Url.ActionLink("Get", "Requests", new { request.AutoGeneratedId }));
        }

        [Authorize(Roles = "Manager,Admin")]
        [HttpPost("Requests/SaveAsDraft")]
        public IActionResult SaveAsDraft([FromForm] Guid autoGeneratedId, [FromForm] int taskReferenceId, [FromForm] string url)
        {
            RequestCollection requests = _requestStore.FindAll();
            Request existing = requests.FindByAutoGeneratedId(autoGeneratedId);

            if (existing != null)
            {
                existing.Status = RequestStatus.PMInProgress;
            }
            else
            {
                Request request = new Request();
                request.AuthorId = User.GetUserId();
                request.AutoGeneratedId = autoGeneratedId;
                request.TaskReferenceId = taskReferenceId;
                request.Url = HttpUtility.UrlDecode(url);
                requests.Add(request);
            }

            _requestStore.Save(requests);

            return Ok();
        }

        [Authorize(Roles = "Developer")]
        [HttpGet("Requests/Complete/{autogeneratedId:guid}")]
        public IActionResult Complete([FromRoute] Guid autoGeneratedId)
        {
            RequestCollection requests = _requestStore.FindAll();
            Request request = requests.FindByAutoGeneratedId(autoGeneratedId);
            if (request != null)
            {
                request.TimeOfSubmit = DateTime.Now;
                request.Status = RequestStatus.DevCompleted;
                request.DeveloperName = User.Identity.Name;
                _requestStore.Save(requests);
            }

            return RedirectToAction("Get", new { autoGeneratedId });
        }

        [Authorize(Roles = "Manager,Admin")]
        [HttpGet("Requests/CompleteByManager/{autogeneratedId:guid}")]
        public IActionResult CompleteByManager([FromRoute] Guid autoGeneratedId)
        {
            RequestCollection requests = _requestStore.FindAll();
            Request request = requests.FindByAutoGeneratedId(autoGeneratedId);
            if (request != null)
            {
                request.Status = RequestStatus.PMCompleted;
                _requestStore.Save(requests);
            }

            return RedirectToAction("List");
        }

        [Authorize(Roles = "Manager,Admin")]
        [HttpPut]
        public IActionResult UpdateElement([FromBody] HtmlElementUpdateModel model)
        {
            try
            {
                HtmlContainerCollection containers = _store.OpenLatest(model.Url, User.GetUserId());
                bool updated = containers.UpdateElement(model.Element);
                if (updated)
                {
                    _store.Save(containers, model.Url, User.GetUserId());
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
                throw new Exception("Could not update");
            }

            return Json(model.Url);
        }

        [Authorize]
        [HttpPut]
        public IActionResult UpdateElementImage([FromForm] HtmlElementUpdateImageModel model)
        {
            try
            {
                string authorId;
                if (User.IsInRole("Developer"))
                {
                    RequestCollection requests = _requestStore.FindAll();
                    Request request = requests.FindByAutoGeneratedId(model.AutoGeneratedId);
                    authorId = request.AuthorId;
                }
                else
                {
                    authorId = User.GetUserId();
                }

                string directory = Path.Combine(_environment.WebRootPath, "img");
                if (!Directory.Exists(directory))
                {
                    Directory.CreateDirectory(directory);
                }

                string fileName = $"{Path.GetFileNameWithoutExtension(model.Image.FileName)}{DateTime.Now:yyyyMMddHHmmss}{Path.GetExtension(model.Image.FileName)}";
                string filePath = Path.Combine(directory, fileName);
                string fileUrl = $"/img/{fileName}";

                using (FileStream stream = new FileStream(filePath, FileMode.Create))
                {
                    model.Image.CopyTo(stream);
                }

                HtmlContainerCollection containers = _store.OpenLatest(model.Url, authorId);
                HtmlElement element = new HtmlElement { Id = model.ElementId, Src = fileUrl };
                bool updated = containers.UpdateElement(element);
                if (updated)
                {
                    _store.Save(containers, model.Url, authorId);
                }

                return Ok(fileUrl);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
                throw new Exception("Could not update");
            }
        }

        [Authorize(Roles = "Manager,Admin")]
        [HttpPut]
        public IActionResult UpdateContainerTitle([FromBody] HtmlContainerUpdateTitleModel model)
        {
            try
            {
                HtmlContainerCollection containers = _store.OpenLatest(model.Url, User.GetUserId());
                HtmlContainer found = containers.FindContainerById(model.ContainerId);
                if (found != null)
                {
                    found.Title = model.ContainerTitle;
                    _store.Save(containers, model.Url, User.GetUserId());
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
                throw new Exception("Could not update");
            }

            return Json(model.Url);
        }

        [Authorize(Roles = "Manager,Admin")]
        [HttpPost]
        public IActionResult DeleteElement([FromBody] HtmlElementDeleteModel model)
        {
            bool deleted;
            try
            {
                HtmlContainerCollection containers = _store.OpenLatest(model.Url, User.GetUserId());
                deleted = containers.DeleteElement(model.ElementId);
                if (deleted)
                {
                    _store.Save(containers, model.Url, User.GetUserId());
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
                throw new Exception("Could not delete");
            }

            return Json(deleted);
        }

        [Authorize(Roles = "Manager,Admin")]
        [HttpPost]
        public IActionResult CloneContainer([FromBody] HtmlElementCloneModel model)
        {
            try
            {
                HtmlContainerCollection containers = _store.OpenLatest(model.Url, User.GetUserId());
                HtmlContainer cloned = containers.CloneContainer(model.ContainerId, out HtmlContainer parent);
                if (cloned != null)
                {
                    _store.Save(containers, model.Url, User.GetUserId());

                    return ViewComponent("HtmlContainer", new HtmlContainerViewComponentModel(cloned, parent));
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
                throw new Exception("Could not clone");
            }

            return Ok();
        }

        [HttpGet("Requests/{url}")]
        public async Task<IActionResult> DownloadImage([FromRoute] string url)
        {
            string urlDecoded = HttpUtility.UrlDecode(url);
            if (urlDecoded.StartsWith("/"))
            {
                urlDecoded = UriHelper.BuildAbsolute(Request.Scheme, Request.Host, Request.PathBase, urlDecoded);
            }

            HttpClient client = new HttpClient();
            HttpResponseMessage response = await client.GetAsync(urlDecoded);
            byte[] imageBytes = await response.Content.ReadAsByteArrayAsync();
            string imageName = Path.GetFileName(urlDecoded);
            new FileExtensionContentTypeProvider().TryGetContentType(imageName, out string contentType);

            return File(imageBytes, contentType);
        }
    }
}